generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  password  String?
  role      String   @default("member")
  image String? 
  bookings  Booking[]
  favorites Favorite[]
}

model Book {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  author      String
  isbn        String   @unique
  totalBook   Int
  available   Boolean  @default(true)
  description String?
  imageUrl    String?  // This field should exist
  categoryId  String?   @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    Booking[]
  favorites Favorite[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  imageUrl  String?  
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Reverse relation
  books     Book[]
}


model Booking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookId    String   @db.ObjectId
  status    String
  dueDate   DateTime?
  createdAt DateTime @default(now())
  returnedAt DateTime?
  user   User @relation(fields: [userId], references: [id])
  book   Book @relation(fields: [bookId], references: [id])
  fine   Int      @default(0)
  daysRemaining Int      @default(30) 
}

model Favorite {
  id     String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  bookId String @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  book   Book @relation(fields: [bookId], references: [id])

  createdAt DateTime @default(now())
}
